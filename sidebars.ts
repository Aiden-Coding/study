import type {SidebarsConfig} from '@docusaurus/plugin-content-docs';

/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.
 */
const sidebars: SidebarsConfig = {
  // By default, Docusaurus generates a sidebar from the docs folder structure
  // tutorialSidebar: [{type: 'autogenerated', dirName: '.'}],

  // But you can create a sidebar manually
  /*
  tutorialSidebar: [
    'intro',
    'hello',
    {
      type: 'category',
      label: 'Tutorial',
      items: ['tutorial-basics/create-a-document'],
    },
  ],
   */
   java: [
    {
      type: "category",
      label: "基础",
      items: [
        "Java/basic/抽象类和接口",
        "Java/basic/序列化和反序列化",
        "Java/basic/代码块和代码执行顺序",
        "Java/basic/多线程",
        "Java/basic/反射",
        "Java/basic/泛型",
        "Java/basic/继承、封装、多态的实现原理",
        "Java/basic/解读Java中的回调",
        "Java/basic/枚举类",
        "Java/basic/面向对象基础",
        "Java/basic/深入理解内部类",
        "Java/basic/final关键字特性",
        "Java/basic/Java8新特性终极指南",
        "Java/basic/Java基本数据类型",
        "Java/basic/Java集合框架梳理",
        "Java/basic/Java类和包",
        "Java/basic/Java异常",
        "Java/basic/Java中的Class类和Object类",
        "Java/basic/Java注解和最佳实践",
        "Java/basic/Java自动拆箱装箱里隐藏的秘密",
        "Java/basic/javac和javap",
        "Java/basic/JavaIO流",
        "Java/basic/string和包装类",
      ],
    },
    {
      type: "category",
      label: "集合",
      items: [
        "Java/collection/Java集合类总结",
        "Java/collection/Java集合详解：深入理解LinkedHashMap和LRU缓存",
        "Java/collection/Java集合详解：一文读懂ArrayList,Vector与Stack使用方法和实现原理",
        "Java/collection/Java集合详解：HashMap和HashTable",
        "Java/collection/Java集合详解：HashSet，TreeSet与LinkedHashSet",
        "Java/collection/Java集合详解：Iterator，fail-fast机制与比较器",
        "Java/collection/Java集合详解：Java集合类细节精讲",
        "Java/collection/Java集合详解：Queue和LinkedList",
        "Java/collection/Java集合详解：TreeMap和红黑树",
      ],
    },
    {
      type: "category",
      label: "并发",
      items: [
        "Java/concurrency/Java并发编程学习总结",
        "Java/concurrency/Java并发指南：并发基础与Java多线程",
        "Java/concurrency/Java并发指南：并发三大问题与volatile关键字，CAS操作",
        "Java/concurrency/Java并发指南：解读Java阻塞队列BlockingQueue",
        "Java/concurrency/Java并发指南：深度解读Java线程池设计思想及源码实现",
        "Java/concurrency/Java并发指南：深入理解Java内存模型JMM",
        "Java/concurrency/Java并发指南：AQS共享模式与并发工具类的实现",
        "Java/concurrency/Java并发指南：AQS中的公平锁与非公平锁，Condtion",
        "Java/concurrency/Java并发指南：ForkJoin并发框架与工作窃取算法剖析",
        "Java/concurrency/Java并发指南：Java读写锁ReentrantReadWriteLock源码分析",
        "Java/concurrency/Java并发指南：Java内存模型JMM总结",
        "Java/concurrency/Java并发指南：Java中的锁Lock和synchronized",
        "Java/concurrency/Java并发指南：Java中的HashMap和ConcurrentHashMap全解析",
        "Java/concurrency/Java并发指南：JMM中的final关键字解析",
        "Java/concurrency/Java并发指南：JUC的核心类AQS详解",
        "Java/concurrency/Java并发指南：JUC中常用的Unsafe和Locksupport",
      ],
    },
    {
      type: "category",
      label: "设计模式",
      items: [
        "Java/design-parttern/初探Java设计模式：创建型模式（工厂，单例等）",
        "Java/design-parttern/初探Java设计模式：结构型模式（代理模式，适配器模式等）",
        "Java/design-parttern/初探Java设计模式：行为型模式（策略，观察者等）",
        "Java/design-parttern/初探Java设计模式：JDK中的设计模式",
        "Java/design-parttern/初探Java设计模式：Spring涉及到的种设计模式",
        "Java/design-parttern/设计模式学习总结",
      ],
    },
    {
      type: "category",
      label: "jvm",
      items: [
        "Java/JVM/深入理解JVM虚拟机：垃圾回收器详解",
        "Java/JVM/深入理解JVM虚拟机：深入理解JVM类加载机制",
        "Java/JVM/深入理解JVM虚拟机：虚拟机字节码执行引擎",
        "Java/JVM/深入理解JVM虚拟机：再谈四种引用及GC实践",
        "Java/JVM/深入理解JVM虚拟机：GC调优思路与常用工具",
        "Java/JVM/深入理解JVM虚拟机：Java的编译期优化与运行期优化",
        "Java/JVM/深入理解JVM虚拟机：Java内存异常原理与实践",
        "Java/JVM/深入理解JVM虚拟机：Java字节码介绍与解析实践",
        "Java/JVM/深入理解JVM虚拟机：JNDI，OSGI，Tomcat类加载器实现",
        "Java/JVM/深入理解JVM虚拟机：JVM常用参数以及调优实践",
        "Java/JVM/深入理解JVM虚拟机：JVM监控工具与诊断实践",
        "Java/JVM/深入理解JVM虚拟机：JVM垃圾回收基本原理和算法",
        "Java/JVM/深入理解JVM虚拟机：JVM内存的结构与消失的永久代",
        "Java/JVM/深入理解JVM虚拟机：JVM性能管理神器VisualVM介绍与实战",
        "Java/JVM/JVM总结",
      ],
    },
    {
      type: "category",
      label: "网络",
      items: [
        "Java/network/基于NIO的网络编程框架Netty",
        "Java/network/浅谈Linux中Selector的实现原理",
        "Java/network/浅析mmap和DirectBuffer",
        "Java/network/浅析NIO包中的Buffer、Channel和Selector",
        "Java/network/深度解读Tomcat中的NIO模型",
        "Java/network/IO模型与Java网络编程模型",
        "Java/network/Java非阻塞IO和异步IO",
        "Java/network/JAVA中原生的socket通信机制",
        "Java/network/JavaNIO一步步构建IO多路复用的请求模型",
        "Java/network/LinuxEpoll实现原理详解",
        "Java/network/Tomcat中的Connector源码分析（NIO）",
        "Java/network/Java网络与NIO总结",
      ],
    },
  ]
};

export default sidebars;
